
uart.elf:     file format elf32-littlenios2
uart.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000468 memsz 0x00000468 flags r-x
    LOAD off    0x00001488 vaddr 0x00001488 paddr 0x00001578 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001668 vaddr 0x00001668 paddr 0x00001668 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001578  2**0
                  CONTENTS
  2 .text         00000468  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00001488  00001668  00001578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       000000f0  00001488  00001578  00001488  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00001668  00001668  00001668  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001678  00001678  00001578  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000220  00000000  00000000  000015a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002ade  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ef8  00000000  00000000  0000429e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001029  00000000  00000000  00005196  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000290  00000000  00000000  000061c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000a71  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000055b  00000000  00000000  00006ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000741c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  00007430  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000842e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00008431  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000843d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000843e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  0000843f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  00008445  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  0000844b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00008451  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  00008455  2**0
                  CONTENTS, READONLY
 26 .jdi          0000381d  00000000  00000000  00008473  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00032ab6  00000000  00000000  0000bc90  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001488 l    d  .rodata	00000000 .rodata
00001488 l    d  .rwdata	00000000 .rwdata
00001668 l    d  .bss	00000000 .bss
00001678 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../uart_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 impure.c
00001488 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
0000108c g     F .text	0000001c putchar
00001344 g     F .text	0000002c alt_main
00001578 g       *ABS*	00000000 __flash_rwdata_start
00001480 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001668 g     O .bss	00000004 errno
00001670 g     O .bss	00000004 alt_argv
00009568 g       *ABS*	00000000 _gp
00001084 g     F .text	00000008 _putchar_r
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001568 g     O .rwdata	00000004 _global_impure_ptr
00001678 g       *ABS*	00000000 __bss_end
00001478 g     F .text	00000004 alt_dcache_flush_all
00001578 g       *ABS*	00000000 __ram_rwdata_end
00001370 g     F .text	00000060 write
000010fc g     F .text	00000058 _putc_r
00001488 g       *ABS*	00000000 __ram_rodata_end
00001678 g       *ABS*	00000000 end
000013f4 g     F .text	00000084 altera_avalon_uart_write
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001020 g     F .text	0000003c _start
000013f0 g     F .text	00000004 alt_sys_init
00001488 g       *ABS*	00000000 __ram_rwdata_start
00001488 g       *ABS*	00000000 __ram_rodata_start
00001678 g       *ABS*	00000000 __alt_stack_base
00001154 g     F .text	000000b8 __sfvwrite_small_dev
00001668 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000028 main
0000166c g     O .bss	00000004 alt_envp
00001570 g     O .rwdata	00000004 uart_0
00001574 g     O .rwdata	00000004 alt_errno
000010a8 g     F .text	00000054 putc
00001488 g       *ABS*	00000000 __flash_rodata_start
000013d0 g     F .text	00000020 alt_irq_init
0000120c g     F .text	00000058 _write_r
0000156c g     O .rwdata	00000004 _impure_ptr
00001674 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001578 g       *ABS*	00000000 _edata
00001678 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
0000147c g     F .text	00000004 alt_icache_flush_all
00001264 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a55a14 	ori	gp,gp,38248
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10859a14 	ori	r2,r2,5736

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c59e14 	ori	r3,r3,5752

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7adc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00012640 	call	1264 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00013440 	call	1344 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7af0>

0000105c <main>:
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_uart_regs.h"

int main()
{ 
    105c:	defffe04 	addi	sp,sp,-8
    1060:	dc000015 	stw	r16,0(sp)
    1064:	dfc00115 	stw	ra,4(sp)

  while (1){
	  char a;
	  a = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    1068:	040c0004 	movi	r16,12288
    106c:	81000037 	ldwio	r4,0(r16)
	  printf("%c", a);
    1070:	21003fcc 	andi	r4,r4,255
    1074:	2100201c 	xori	r4,r4,128
    1078:	213fe004 	addi	r4,r4,-128
    107c:	000108c0 	call	108c <putchar>
    1080:	003ffa06 	br	106c <_gp+0xffff7b04>

00001084 <_putchar_r>:
    1084:	21800217 	ldw	r6,8(r4)
    1088:	00010fc1 	jmpi	10fc <_putc_r>

0000108c <putchar>:
    108c:	00800034 	movhi	r2,0
    1090:	10855b04 	addi	r2,r2,5484
    1094:	10800017 	ldw	r2,0(r2)
    1098:	200b883a 	mov	r5,r4
    109c:	11800217 	ldw	r6,8(r2)
    10a0:	1009883a 	mov	r4,r2
    10a4:	00010fc1 	jmpi	10fc <_putc_r>

000010a8 <putc>:
    10a8:	defffd04 	addi	sp,sp,-12
    10ac:	00800034 	movhi	r2,0
    10b0:	dc000115 	stw	r16,4(sp)
    10b4:	dfc00215 	stw	ra,8(sp)
    10b8:	10845504 	addi	r2,r2,4436
    10bc:	28800115 	stw	r2,4(r5)
    10c0:	00800034 	movhi	r2,0
    10c4:	10855b04 	addi	r2,r2,5484
    10c8:	d9000005 	stb	r4,0(sp)
    10cc:	2021883a 	mov	r16,r4
    10d0:	11000017 	ldw	r4,0(r2)
    10d4:	01c00044 	movi	r7,1
    10d8:	d80d883a 	mov	r6,sp
    10dc:	00011540 	call	1154 <__sfvwrite_small_dev>
    10e0:	00ffffc4 	movi	r3,-1
    10e4:	10c00126 	beq	r2,r3,10ec <putc+0x44>
    10e8:	8005883a 	mov	r2,r16
    10ec:	dfc00217 	ldw	ra,8(sp)
    10f0:	dc000117 	ldw	r16,4(sp)
    10f4:	dec00304 	addi	sp,sp,12
    10f8:	f800283a 	ret

000010fc <_putc_r>:
    10fc:	defffd04 	addi	sp,sp,-12
    1100:	00800034 	movhi	r2,0
    1104:	dc000115 	stw	r16,4(sp)
    1108:	dfc00215 	stw	ra,8(sp)
    110c:	10845504 	addi	r2,r2,4436
    1110:	30800115 	stw	r2,4(r6)
    1114:	00800034 	movhi	r2,0
    1118:	10855b04 	addi	r2,r2,5484
    111c:	11000017 	ldw	r4,0(r2)
    1120:	2821883a 	mov	r16,r5
    1124:	01c00044 	movi	r7,1
    1128:	300b883a 	mov	r5,r6
    112c:	d80d883a 	mov	r6,sp
    1130:	dc000005 	stb	r16,0(sp)
    1134:	00011540 	call	1154 <__sfvwrite_small_dev>
    1138:	00ffffc4 	movi	r3,-1
    113c:	10c00126 	beq	r2,r3,1144 <_putc_r+0x48>
    1140:	8005883a 	mov	r2,r16
    1144:	dfc00217 	ldw	ra,8(sp)
    1148:	dc000117 	ldw	r16,4(sp)
    114c:	dec00304 	addi	sp,sp,12
    1150:	f800283a 	ret

00001154 <__sfvwrite_small_dev>:
    1154:	2880000b 	ldhu	r2,0(r5)
    1158:	1080020c 	andi	r2,r2,8
    115c:	10002126 	beq	r2,zero,11e4 <__sfvwrite_small_dev+0x90>
    1160:	2880008f 	ldh	r2,2(r5)
    1164:	defffa04 	addi	sp,sp,-24
    1168:	dc000015 	stw	r16,0(sp)
    116c:	dfc00515 	stw	ra,20(sp)
    1170:	dd000415 	stw	r20,16(sp)
    1174:	dcc00315 	stw	r19,12(sp)
    1178:	dc800215 	stw	r18,8(sp)
    117c:	dc400115 	stw	r17,4(sp)
    1180:	2821883a 	mov	r16,r5
    1184:	10001216 	blt	r2,zero,11d0 <__sfvwrite_small_dev+0x7c>
    1188:	2027883a 	mov	r19,r4
    118c:	3025883a 	mov	r18,r6
    1190:	3823883a 	mov	r17,r7
    1194:	05010004 	movi	r20,1024
    1198:	04400b0e 	bge	zero,r17,11c8 <__sfvwrite_small_dev+0x74>
    119c:	880f883a 	mov	r7,r17
    11a0:	a440010e 	bge	r20,r17,11a8 <__sfvwrite_small_dev+0x54>
    11a4:	01c10004 	movi	r7,1024
    11a8:	8140008f 	ldh	r5,2(r16)
    11ac:	900d883a 	mov	r6,r18
    11b0:	9809883a 	mov	r4,r19
    11b4:	000120c0 	call	120c <_write_r>
    11b8:	0080050e 	bge	zero,r2,11d0 <__sfvwrite_small_dev+0x7c>
    11bc:	88a3c83a 	sub	r17,r17,r2
    11c0:	90a5883a 	add	r18,r18,r2
    11c4:	003ff406 	br	1198 <_gp+0xffff7c30>
    11c8:	0005883a 	mov	r2,zero
    11cc:	00000706 	br	11ec <__sfvwrite_small_dev+0x98>
    11d0:	8080000b 	ldhu	r2,0(r16)
    11d4:	10801014 	ori	r2,r2,64
    11d8:	8080000d 	sth	r2,0(r16)
    11dc:	00bfffc4 	movi	r2,-1
    11e0:	00000206 	br	11ec <__sfvwrite_small_dev+0x98>
    11e4:	00bfffc4 	movi	r2,-1
    11e8:	f800283a 	ret
    11ec:	dfc00517 	ldw	ra,20(sp)
    11f0:	dd000417 	ldw	r20,16(sp)
    11f4:	dcc00317 	ldw	r19,12(sp)
    11f8:	dc800217 	ldw	r18,8(sp)
    11fc:	dc400117 	ldw	r17,4(sp)
    1200:	dc000017 	ldw	r16,0(sp)
    1204:	dec00604 	addi	sp,sp,24
    1208:	f800283a 	ret

0000120c <_write_r>:
    120c:	defffd04 	addi	sp,sp,-12
    1210:	dc000015 	stw	r16,0(sp)
    1214:	04000034 	movhi	r16,0
    1218:	dc400115 	stw	r17,4(sp)
    121c:	84059a04 	addi	r16,r16,5736
    1220:	2023883a 	mov	r17,r4
    1224:	2809883a 	mov	r4,r5
    1228:	300b883a 	mov	r5,r6
    122c:	380d883a 	mov	r6,r7
    1230:	dfc00215 	stw	ra,8(sp)
    1234:	80000015 	stw	zero,0(r16)
    1238:	00013700 	call	1370 <write>
    123c:	00ffffc4 	movi	r3,-1
    1240:	10c0031e 	bne	r2,r3,1250 <_write_r+0x44>
    1244:	80c00017 	ldw	r3,0(r16)
    1248:	18000126 	beq	r3,zero,1250 <_write_r+0x44>
    124c:	88c00015 	stw	r3,0(r17)
    1250:	dfc00217 	ldw	ra,8(sp)
    1254:	dc400117 	ldw	r17,4(sp)
    1258:	dc000017 	ldw	r16,0(sp)
    125c:	dec00304 	addi	sp,sp,12
    1260:	f800283a 	ret

00001264 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1264:	deffff04 	addi	sp,sp,-4
    1268:	01000034 	movhi	r4,0
    126c:	01400034 	movhi	r5,0
    1270:	dfc00015 	stw	ra,0(sp)
    1274:	21052204 	addi	r4,r4,5256
    1278:	29455e04 	addi	r5,r5,5496

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    127c:	2140061e 	bne	r4,r5,1298 <alt_load+0x34>
    1280:	01000034 	movhi	r4,0
    1284:	01400034 	movhi	r5,0
    1288:	21040804 	addi	r4,r4,4128
    128c:	29440804 	addi	r5,r5,4128
    1290:	2140121e 	bne	r4,r5,12dc <alt_load+0x78>
    1294:	00000b06 	br	12c4 <alt_load+0x60>
    1298:	00c00034 	movhi	r3,0
    129c:	18c55e04 	addi	r3,r3,5496
    12a0:	1907c83a 	sub	r3,r3,r4
    12a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    12a8:	10fff526 	beq	r2,r3,1280 <_gp+0xffff7d18>
    {
      *to++ = *from++;
    12ac:	114f883a 	add	r7,r2,r5
    12b0:	39c00017 	ldw	r7,0(r7)
    12b4:	110d883a 	add	r6,r2,r4
    12b8:	10800104 	addi	r2,r2,4
    12bc:	31c00015 	stw	r7,0(r6)
    12c0:	003ff906 	br	12a8 <_gp+0xffff7d40>
    12c4:	01000034 	movhi	r4,0
    12c8:	01400034 	movhi	r5,0
    12cc:	21052204 	addi	r4,r4,5256
    12d0:	29452204 	addi	r5,r5,5256

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    12d4:	2140101e 	bne	r4,r5,1318 <alt_load+0xb4>
    12d8:	00000b06 	br	1308 <alt_load+0xa4>
    12dc:	00c00034 	movhi	r3,0
    12e0:	18c40804 	addi	r3,r3,4128
    12e4:	1907c83a 	sub	r3,r3,r4
    12e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    12ec:	10fff526 	beq	r2,r3,12c4 <_gp+0xffff7d5c>
    {
      *to++ = *from++;
    12f0:	114f883a 	add	r7,r2,r5
    12f4:	39c00017 	ldw	r7,0(r7)
    12f8:	110d883a 	add	r6,r2,r4
    12fc:	10800104 	addi	r2,r2,4
    1300:	31c00015 	stw	r7,0(r6)
    1304:	003ff906 	br	12ec <_gp+0xffff7d84>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1308:	00014780 	call	1478 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    130c:	dfc00017 	ldw	ra,0(sp)
    1310:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1314:	000147c1 	jmpi	147c <alt_icache_flush_all>
    1318:	00c00034 	movhi	r3,0
    131c:	18c52204 	addi	r3,r3,5256
    1320:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1324:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1328:	18bff726 	beq	r3,r2,1308 <_gp+0xffff7da0>
    {
      *to++ = *from++;
    132c:	114f883a 	add	r7,r2,r5
    1330:	39c00017 	ldw	r7,0(r7)
    1334:	110d883a 	add	r6,r2,r4
    1338:	10800104 	addi	r2,r2,4
    133c:	31c00015 	stw	r7,0(r6)
    1340:	003ff906 	br	1328 <_gp+0xffff7dc0>

00001344 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1344:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1348:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    134c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1350:	00013d00 	call	13d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1354:	00013f00 	call	13f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1358:	d1a04117 	ldw	r6,-32508(gp)
    135c:	d1604217 	ldw	r5,-32504(gp)
    1360:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1364:	dfc00017 	ldw	ra,0(sp)
    1368:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    136c:	000105c1 	jmpi	105c <main>

00001370 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1370:	00800044 	movi	r2,1
    1374:	20800226 	beq	r4,r2,1380 <write+0x10>
    1378:	00800084 	movi	r2,2
    137c:	2080041e 	bne	r4,r2,1390 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1380:	01000034 	movhi	r4,0
    1384:	000f883a 	mov	r7,zero
    1388:	21055c04 	addi	r4,r4,5488
    138c:	00013f41 	jmpi	13f4 <altera_avalon_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1390:	d0a00317 	ldw	r2,-32756(gp)
    1394:	10000926 	beq	r2,zero,13bc <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1398:	deffff04 	addi	sp,sp,-4
    139c:	dfc00015 	stw	ra,0(sp)
    13a0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    13a4:	00c01444 	movi	r3,81
    13a8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    13ac:	00bfffc4 	movi	r2,-1
    13b0:	dfc00017 	ldw	ra,0(sp)
    13b4:	dec00104 	addi	sp,sp,4
    13b8:	f800283a 	ret
    13bc:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    13c0:	00c01444 	movi	r3,81
    13c4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    13c8:	00bfffc4 	movi	r2,-1
    13cc:	f800283a 	ret

000013d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    13d0:	deffff04 	addi	sp,sp,-4
    13d4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    13d8:	00014800 	call	1480 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    13dc:	00800044 	movi	r2,1
    13e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    13e4:	dfc00017 	ldw	ra,0(sp)
    13e8:	dec00104 	addi	sp,sp,4
    13ec:	f800283a 	ret

000013f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    13f0:	f800283a 	ret

000013f4 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    13f4:	defffd04 	addi	sp,sp,-12
    13f8:	dc400115 	stw	r17,4(sp)
    13fc:	dc000015 	stw	r16,0(sp)
    1400:	dfc00215 	stw	ra,8(sp)
    1404:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    1408:	39d0000c 	andi	r7,r7,16384
  count = len;
    140c:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    1410:	20c00017 	ldw	r3,0(r4)
    1414:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    1418:	1080100c 	andi	r2,r2,64
    141c:	10000526 	beq	r2,zero,1434 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    1420:	28800044 	addi	r2,r5,1
    1424:	29400007 	ldb	r5,0(r5)
    1428:	19400135 	stwio	r5,4(r3)
      count--;
    142c:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    1430:	100b883a 	mov	r5,r2
      count--;
    }
  }
  while (block && count);
    1434:	3800021e 	bne	r7,zero,1440 <altera_avalon_uart_write+0x4c>
    1438:	803ff51e 	bne	r16,zero,1410 <_gp+0xffff7ea8>
    143c:	00000806 	br	1460 <altera_avalon_uart_write+0x6c>

  if (count)
    1440:	80000726 	beq	r16,zero,1460 <altera_avalon_uart_write+0x6c>
    1444:	d0a00317 	ldw	r2,-32756(gp)
    1448:	10000226 	beq	r2,zero,1454 <altera_avalon_uart_write+0x60>
    144c:	103ee83a 	callr	r2
    1450:	00000106 	br	1458 <altera_avalon_uart_write+0x64>
    1454:	d0a04004 	addi	r2,gp,-32512
  {
    ALT_ERRNO = EWOULDBLOCK;
    1458:	00c002c4 	movi	r3,11
    145c:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    1460:	8c05c83a 	sub	r2,r17,r16
    1464:	dfc00217 	ldw	ra,8(sp)
    1468:	dc400117 	ldw	r17,4(sp)
    146c:	dc000017 	ldw	r16,0(sp)
    1470:	dec00304 	addi	sp,sp,12
    1474:	f800283a 	ret

00001478 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1478:	f800283a 	ret

0000147c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    147c:	f800283a 	ret

00001480 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1480:	000170fa 	wrctl	ienable,zero
    1484:	f800283a 	ret

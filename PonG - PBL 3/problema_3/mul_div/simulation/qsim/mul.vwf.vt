// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2017 22:52:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mul
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mul_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clk_en;
reg [31:0] dataa;
reg [31:0] datab;
reg reset;
reg start;
// wires                                               
wire done;
wire [31:0] result;

// assign statements (if any)                          
mul i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_en(clk_en),
	.dataa(dataa),
	.datab(datab),
	.done(done),
	.reset(reset),
	.result(result),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #10000 1'b1;
	reset = #10000 1'b0;
end 

// clk_en
initial
begin
	clk_en = 1'b1;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #10000 1'b0;
end 
// dataa[ 31 ]
initial
begin
	dataa[31] = 1'b0;
end 
// dataa[ 30 ]
initial
begin
	dataa[30] = 1'b0;
end 
// dataa[ 29 ]
initial
begin
	dataa[29] = 1'b0;
end 
// dataa[ 28 ]
initial
begin
	dataa[28] = 1'b0;
end 
// dataa[ 27 ]
initial
begin
	dataa[27] = 1'b0;
end 
// dataa[ 26 ]
initial
begin
	dataa[26] = 1'b0;
end 
// dataa[ 25 ]
initial
begin
	dataa[25] = 1'b0;
end 
// dataa[ 24 ]
initial
begin
	dataa[24] = 1'b0;
end 
// dataa[ 23 ]
initial
begin
	dataa[23] = 1'b0;
end 
// dataa[ 22 ]
initial
begin
	dataa[22] = 1'b0;
end 
// dataa[ 21 ]
initial
begin
	dataa[21] = 1'b0;
end 
// dataa[ 20 ]
initial
begin
	dataa[20] = 1'b0;
end 
// dataa[ 19 ]
initial
begin
	dataa[19] = 1'b0;
end 
// dataa[ 18 ]
initial
begin
	dataa[18] = 1'b0;
end 
// dataa[ 17 ]
initial
begin
	dataa[17] = 1'b0;
end 
// dataa[ 16 ]
initial
begin
	dataa[16] = 1'b0;
end 
// dataa[ 15 ]
initial
begin
	dataa[15] = 1'b0;
end 
// dataa[ 14 ]
initial
begin
	dataa[14] = 1'b0;
end 
// dataa[ 13 ]
initial
begin
	dataa[13] = 1'b0;
end 
// dataa[ 12 ]
initial
begin
	dataa[12] = 1'b0;
end 
// dataa[ 11 ]
initial
begin
	dataa[11] = 1'b0;
end 
// dataa[ 10 ]
initial
begin
	dataa[10] = 1'b0;
end 
// dataa[ 9 ]
initial
begin
	dataa[9] = 1'b0;
end 
// dataa[ 8 ]
initial
begin
	dataa[8] = 1'b0;
end 
// dataa[ 7 ]
initial
begin
	dataa[7] = 1'b0;
end 
// dataa[ 6 ]
initial
begin
	dataa[6] = 1'b0;
end 
// dataa[ 5 ]
initial
begin
	dataa[5] = 1'b1;
end 
// dataa[ 4 ]
initial
begin
	dataa[4] = 1'b1;
end 
// dataa[ 3 ]
initial
begin
	dataa[3] = 1'b0;
end 
// dataa[ 2 ]
initial
begin
	dataa[2] = 1'b0;
end 
// dataa[ 1 ]
initial
begin
	dataa[1] = 1'b1;
end 
// dataa[ 0 ]
initial
begin
	dataa[0] = 1'b0;
end 
// datab[ 31 ]
initial
begin
	datab[31] = 1'b0;
end 
// datab[ 30 ]
initial
begin
	datab[30] = 1'b0;
end 
// datab[ 29 ]
initial
begin
	datab[29] = 1'b0;
end 
// datab[ 28 ]
initial
begin
	datab[28] = 1'b0;
end 
// datab[ 27 ]
initial
begin
	datab[27] = 1'b0;
end 
// datab[ 26 ]
initial
begin
	datab[26] = 1'b0;
end 
// datab[ 25 ]
initial
begin
	datab[25] = 1'b0;
end 
// datab[ 24 ]
initial
begin
	datab[24] = 1'b0;
end 
// datab[ 23 ]
initial
begin
	datab[23] = 1'b0;
end 
// datab[ 22 ]
initial
begin
	datab[22] = 1'b0;
end 
// datab[ 21 ]
initial
begin
	datab[21] = 1'b0;
end 
// datab[ 20 ]
initial
begin
	datab[20] = 1'b0;
end 
// datab[ 19 ]
initial
begin
	datab[19] = 1'b0;
end 
// datab[ 18 ]
initial
begin
	datab[18] = 1'b0;
end 
// datab[ 17 ]
initial
begin
	datab[17] = 1'b0;
end 
// datab[ 16 ]
initial
begin
	datab[16] = 1'b0;
end 
// datab[ 15 ]
initial
begin
	datab[15] = 1'b0;
end 
// datab[ 14 ]
initial
begin
	datab[14] = 1'b0;
end 
// datab[ 13 ]
initial
begin
	datab[13] = 1'b0;
end 
// datab[ 12 ]
initial
begin
	datab[12] = 1'b0;
end 
// datab[ 11 ]
initial
begin
	datab[11] = 1'b0;
end 
// datab[ 10 ]
initial
begin
	datab[10] = 1'b0;
end 
// datab[ 9 ]
initial
begin
	datab[9] = 1'b0;
end 
// datab[ 8 ]
initial
begin
	datab[8] = 1'b0;
end 
// datab[ 7 ]
initial
begin
	datab[7] = 1'b0;
end 
// datab[ 6 ]
initial
begin
	datab[6] = 1'b0;
end 
// datab[ 5 ]
initial
begin
	datab[5] = 1'b0;
end 
// datab[ 4 ]
initial
begin
	datab[4] = 1'b1;
end 
// datab[ 3 ]
initial
begin
	datab[3] = 1'b0;
end 
// datab[ 2 ]
initial
begin
	datab[2] = 1'b1;
end 
// datab[ 1 ]
initial
begin
	datab[1] = 1'b1;
end 
// datab[ 0 ]
initial
begin
	datab[0] = 1'b1;
end 
endmodule

